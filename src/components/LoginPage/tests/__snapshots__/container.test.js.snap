// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LoginPage should render correctly 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(LoginPage)>
    <LoginPage
      isFailed={false}
    >
      <div
        style={
          Object {
            "alignItems": "center",
            "display": "flex",
            "height": "100%",
            "justifyContent": "center",
          }
        }
      >
        <WithFormik(withI18nextTranslation(MyFormInner))
          isFailed={false}
        >
          <Formik
            enableReinitialize={false}
            handleSubmit={[Function]}
            initialValues={
              Object {
                "email": "",
                "password": "",
              }
            }
            isFailed={false}
            isInitialValid={false}
            onSubmit={[Function]}
            render={[Function]}
            validateOnBlur={true}
            validateOnChange={true}
            validationSchema={[Function]}
          >
            <withI18nextTranslation(MyFormInner)
              dirty={false}
              errors={Object {}}
              handleBlur={[Function]}
              handleChange={[Function]}
              handleReset={[Function]}
              handleSubmit={[Function]}
              initialValues={
                Object {
                  "email": "",
                  "password": "",
                }
              }
              isFailed={false}
              isSubmitting={false}
              isValid={false}
              isValidating={false}
              registerField={[Function]}
              resetForm={[Function]}
              setError={[Function]}
              setErrors={[Function]}
              setFieldError={[Function]}
              setFieldTouched={[Function]}
              setFieldValue={[Function]}
              setFormikState={[Function]}
              setStatus={[Function]}
              setSubmitting={[Function]}
              setTouched={[Function]}
              setValues={[Function]}
              submitCount={0}
              submitForm={[Function]}
              touched={Object {}}
              unregisterField={[Function]}
              validateField={[Function]}
              validateForm={[Function]}
              validateOnBlur={true}
              validateOnChange={true}
              values={
                Object {
                  "email": "",
                  "password": "",
                }
              }
            >
              <MyFormInner
                dirty={false}
                errors={Object {}}
                handleBlur={[Function]}
                handleChange={[Function]}
                handleReset={[Function]}
                handleSubmit={[Function]}
                i18n={Object {}}
                initialValues={
                  Object {
                    "email": "",
                    "password": "",
                  }
                }
                isFailed={false}
                isSubmitting={false}
                isValid={false}
                isValidating={false}
                registerField={[Function]}
                resetForm={[Function]}
                setError={[Function]}
                setErrors={[Function]}
                setFieldError={[Function]}
                setFieldTouched={[Function]}
                setFieldValue={[Function]}
                setFormikState={[Function]}
                setStatus={[Function]}
                setSubmitting={[Function]}
                setTouched={[Function]}
                setValues={[Function]}
                submitCount={0}
                submitForm={[Function]}
                t={[Function]}
                tReady={true}
                touched={Object {}}
                unregisterField={[Function]}
                validateField={[Function]}
                validateForm={[Function]}
                validateOnBlur={true}
                validateOnChange={true}
                values={
                  Object {
                    "email": "",
                    "password": "",
                  }
                }
              >
                <Styled(styled.form)
                  onSubmit={[Function]}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-cSHVUG",
                          "isStatic": false,
                          "lastClassName": "gXWBfR",
                          "rules": Array [
                            "
  width: ",
                            [Function],
                            ";
  display: ",
                            [Function],
                            ";
  flex-direction: ",
                            [Function],
                            ";
  align-items: ",
                            [Function],
                            ";
  justify-content: ",
                            [Function],
                            ";
  margin: ",
                            [Function],
                            ";
",
                            "
  min-width: 200px;
  max-width: 600px;
  border-width: 0;
  border-radius: 20px;
  background-color: #f7f8f9;
  box-shadow: 0px 0px 30px -12px rgba(0, 0, 0, 0.75);
  margin: 8px;
",
                          ],
                        },
                        "displayName": "Styled(styled.form)",
                        "foldedComponentIds": Array [
                          "sc-bdVaJa",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-cSHVUG",
                        "target": "form",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onSubmit={[Function]}
                  >
                    <form
                      className="sc-bdVaJa sc-cSHVUG gXWBfR"
                      onSubmit={[Function]}
                    >
                      <styled.header>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gqjmRU",
                                "isStatic": false,
                                "lastClassName": "diNjPe",
                                "rules": Array [
                                  "
  margin: ",
                                  [Function],
                                  ";
  padding: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.header",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gqjmRU",
                              "target": "header",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <header
                            className="sc-gqjmRU diNjPe"
                          >
                            <Styled(styled.h1)>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-chPdSV",
                                      "isStatic": false,
                                      "lastClassName": "ifMhNf",
                                      "rules": Array [
                                        "
  font-family: ",
                                        [Function],
                                        ";
  font-weight: ",
                                        [Function],
                                        ";
  color: ",
                                        [Function],
                                        ";
  font-size: ",
                                        [Function],
                                        ";
  text-align: ",
                                        [Function],
                                        ";
  margin: ",
                                        [Function],
                                        ";
",
                                        "
  font-size: 1.75em;
",
                                      ],
                                    },
                                    "displayName": "Styled(styled.h1)",
                                    "foldedComponentIds": Array [
                                      "sc-ifAKCX",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-chPdSV",
                                    "target": "h1",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <h1
                                  className="sc-ifAKCX sc-chPdSV ifMhNf"
                                >
                                  translations:Welcome
                                </h1>
                              </StyledComponent>
                            </Styled(styled.h1)>
                            <Styled(styled.h2)>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kgoBCf",
                                      "isStatic": false,
                                      "lastClassName": "iSZju",
                                      "rules": Array [
                                        "
  font-family: ",
                                        [Function],
                                        ";
  font-weight: ",
                                        [Function],
                                        "
  color: ",
                                        [Function],
                                        ";
  font-size: ",
                                        [Function],
                                        ";
  text-align: ",
                                        [Function],
                                        ";s
  margin: ",
                                        [Function],
                                        ";
",
                                        "
  margin: 0;
",
                                      ],
                                    },
                                    "displayName": "Styled(styled.h2)",
                                    "foldedComponentIds": Array [
                                      "sc-EHOje",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-kgoBCf",
                                    "target": "h2",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <h2
                                  className="sc-EHOje sc-kgoBCf iSZju"
                                >
                                  label.SignIn
                                </h2>
                              </StyledComponent>
                            </Styled(styled.h2)>
                          </header>
                        </StyledComponent>
                      </styled.header>
                      <styled.main>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-jTzLTM",
                                "isStatic": false,
                                "lastClassName": "bVLzFa",
                                "rules": Array [
                                  "
  margin: ",
                                  [Function],
                                  ";
  padding: ",
                                  [Function],
                                  ";
  width: ",
                                  [Function],
                                  ";
  text-align: center;
",
                                ],
                              },
                              "displayName": "styled.main",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-jTzLTM",
                              "target": "main",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <main
                            className="sc-jTzLTM bVLzFa"
                          >
                            <Styled(styled.input)
                              className="emailInput"
                              id="emailInput"
                              name="email"
                              onBlur={[Function]}
                              onChange={[Function]}
                              placeholder="Email"
                              type="text"
                            >
                              <StyledComponent
                                className="emailInput"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kAzzGY",
                                      "isStatic": false,
                                      "lastClassName": "fAIfVb",
                                      "rules": Array [
                                        "
  width: ",
                                        [Function],
                                        ";
  height: ",
                                        [Function],
                                        ";
  border: ",
                                        [Function],
                                        ";
  background-color: ",
                                        [Function],
                                        ";
  border-radius: ",
                                        [Function],
                                        ";
  margin: ",
                                        [Function],
                                        ";
",
                                        "
  width: 80%;
  padding-left: 13px;
  font-size: 1em;
  :focus {
    outline: none;
    border: 1px solid #ccc;
  }
",
                                      ],
                                    },
                                    "displayName": "Styled(styled.input)",
                                    "foldedComponentIds": Array [
                                      "sc-bwzfXH",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-kAzzGY",
                                    "target": "input",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                id="emailInput"
                                name="email"
                                onBlur={[Function]}
                                onChange={[Function]}
                                placeholder="Email"
                                type="text"
                              >
                                <input
                                  className="sc-bwzfXH emailInput sc-kAzzGY fAIfVb"
                                  id="emailInput"
                                  name="email"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  placeholder="Email"
                                  type="text"
                                />
                              </StyledComponent>
                            </Styled(styled.input)>
                            <Styled(styled.input)
                              className="passwordInput"
                              name="password"
                              onBlur={[Function]}
                              onChange={[Function]}
                              placeholder="Password"
                              type="password"
                              value=""
                            >
                              <StyledComponent
                                className="passwordInput"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kAzzGY",
                                      "isStatic": false,
                                      "lastClassName": "fAIfVb",
                                      "rules": Array [
                                        "
  width: ",
                                        [Function],
                                        ";
  height: ",
                                        [Function],
                                        ";
  border: ",
                                        [Function],
                                        ";
  background-color: ",
                                        [Function],
                                        ";
  border-radius: ",
                                        [Function],
                                        ";
  margin: ",
                                        [Function],
                                        ";
",
                                        "
  width: 80%;
  padding-left: 13px;
  font-size: 1em;
  :focus {
    outline: none;
    border: 1px solid #ccc;
  }
",
                                      ],
                                    },
                                    "displayName": "Styled(styled.input)",
                                    "foldedComponentIds": Array [
                                      "sc-bwzfXH",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-kAzzGY",
                                    "target": "input",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                name="password"
                                onBlur={[Function]}
                                onChange={[Function]}
                                placeholder="Password"
                                type="password"
                                value=""
                              >
                                <input
                                  className="sc-bwzfXH passwordInput sc-kAzzGY fAIfVb"
                                  name="password"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  placeholder="Password"
                                  type="password"
                                  value=""
                                />
                              </StyledComponent>
                            </Styled(styled.input)>
                          </main>
                        </StyledComponent>
                      </styled.main>
                      <styled.footer>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-VigVT",
                                "isStatic": false,
                                "lastClassName": "hCqwmc",
                                "rules": Array [
                                  "
  margin: ",
                                  [Function],
                                  ";
  padding: ",
                                  [Function],
                                  ";
  width: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.footer",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-VigVT",
                              "target": "footer",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <footer
                            className="sc-VigVT hCqwmc"
                          >
                            <Styled(styled.button)
                              className="submitButton"
                              disabled={false}
                              type="submit"
                            >
                              <StyledComponent
                                className="submitButton"
                                disabled={false}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-jzJRlG",
                                      "isStatic": false,
                                      "lastClassName": "ljpSvq",
                                      "rules": Array [
                                        "
  width: ",
                                        [Function],
                                        ";
  height: ",
                                        [Function],
                                        ";
  background-color: ",
                                        [Function],
                                        ";
  color: ",
                                        [Function],
                                        ";
  border-radius: ",
                                        [Function],
                                        ";
  border: ",
                                        [Function],
                                        ";
",
                                        "
  position: relative;
  display: block;
  margin: 10px auto 10px 10%;
  padding: 0px;
  width: 100px;
  overflow: hidden;

  border-width: 0;
  outline: none;
  border-radius: 10px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.6);
  background-color: #2ecc71;
  color: #ecf0f1;

  transition: background-color 0.3s;
  :hover {
    background-color: #27ae60;
  }
",
                                      ],
                                    },
                                    "displayName": "Styled(styled.button)",
                                    "foldedComponentIds": Array [
                                      "sc-htpNat",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-jzJRlG",
                                    "target": "button",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                type="submit"
                              >
                                <button
                                  className="sc-htpNat submitButton sc-jzJRlG ljpSvq"
                                  disabled={false}
                                  type="submit"
                                >
                                  button.SignIn
                                </button>
                              </StyledComponent>
                            </Styled(styled.button)>
                          </footer>
                        </StyledComponent>
                      </styled.footer>
                    </form>
                  </StyledComponent>
                </Styled(styled.form)>
              </MyFormInner>
            </withI18nextTranslation(MyFormInner)>
          </Formik>
        </WithFormik(withI18nextTranslation(MyFormInner))>
      </div>
    </LoginPage>
  </Connect(LoginPage)>
</Provider>
`;
